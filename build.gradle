plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.18'

}


group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven{
        url "https://nexus.gluonhq.com/nexus/content/repositories/releases/"
    }
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = 'com.example.gluonwithspring.HelloApplication'
application {
//    mainModule = 'com.example.gluonwithspring'
    mainClass = 'com.example.gluonwithspring.HelloApplication'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.data:spring-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'com.gluonhq:charm-glisten:6.2.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

gluonfx {
    // target = 'ios' // Uncomment to enable iOS
//    target = 'android' // Uncomment to enable Android
    attachConfig {
        version = "4.0.16"
        services 'display', 'lifecycle', 'statusbar', 'storage'
    }
//
//    linkerArgs = ["-L/usr/lib/x86_64-linux-gnu/"]
//
////        // Initialiser la classe Logger au moment de l'exécution
////    runtimeArgs = ["--initialize-at-build-time=ch.qos.logback.classic.Logger"]
//////        // Ajouter l'option --trace-object-instantiation pour aider à déboguer les problèmes d'instanciation
//    compilerArgs = ["--trace-object-instantiation=ch.qos.logback.classic.Logger",
//                    "--allow-incomplete-classpath",
//                    "--initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger"
////                    "--initialize-at-run-time=io.netty.channel.\\*",
////                    "--initialize-at-run-time=io.netty.channel.ChannelHandlerMask",
////                    "--initialize-at-run-time=io.netty.channel.nio.AbstractNioChannel",
////                    "--initialize-at-run-time=io.netty.channel.pool.SimpleChannelPool",
////                    "--initialize-at-run-time=io.netty.channel.socket.nio.\\*",
////                    "--initialize-at-run-time=io.netty.channel.socket.nio.SelectorProviderUtil",
////                    "--initialize-at-run-time=io.netty.\\*",
////                    "--initialize-at-run-time=io.netty.util.\\*",
////                    "--initialize-at-run-time=io.netty.util.AttributeKey",
////                    "--initialize-at-run-time=io.netty.util.NetUtil",
////                    "--initialize-at-run-time=io.netty.util.NetUtilInitializations",
////                    "--initialize-at-run-time=io.netty.handler.codec.http.HttpScheme",
////                    "--initialize-at-run-time=io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker",
////                    "--initialize-at-run-time=io.netty.util.internal.PlatformDependent",
////                    "--initialize-at-run-time=io.netty.util.AsciiString",
////                    "--initialize-at-run-time=io.netty.\\*",
////                    "--initialize-at-run-time=io.netty.util.internal.SystemPropertyUtil"
//
//    ]
}
